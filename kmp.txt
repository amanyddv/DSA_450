https://leetcode.com/submissions/detail/908469689/

class Solution {
public:
    vector<int> prefix_c(string needle) {
    int m = needle.size();
    vector<int> prefix(m, 0);
    int j = 0;
    for (int i = 1; i < m; i++) {
        while (j > 0 && needle[i] != needle[j]) {
            j = prefix[j-1];
        }
        if (needle[i] == needle[j]) {
            j++;
        }
        prefix[i] = j;
    }
    return prefix;
}
    int strStr(string haystack, string needle) {
        int n = haystack.size();
    int m = needle.size();
    vector<int> prefix = prefix_c(needle);
    int i = 0;
    int j = 0;
    while (i < n) {
        if (haystack[i] == needle[j]) {
            if (j == m - 1) {
                return i - m + 1;
            }
            i++;
            j++;
        }
        else if (j > 0) {
            j = prefix[j-1];
        }
        else {
            i++;
        }
    }
    return -1;
    }
};

Time Complexity : O(log(n+m))